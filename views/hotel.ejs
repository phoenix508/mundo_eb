<div class="relative bg-gradient-to-b from-black via-blue-900 to-black min-h-screen">
    <!-- Animated mesh gradient background -->
    <div class="absolute inset-0 opacity-30 mix-blend-overlay">
        <div class="mesh-gradient"></div>
    </div>

    <section class="hotel-reviews-section py-10 px-6 relative">
        <!-- Review Form Section -->
        <div class="mb-12 p-6 bg-white/90 backdrop-blur-sm shadow-md rounded-lg">
            <h2 class="text-2xl font-semibold mb-6 text-black">Write a Review</h2>
            <form id="reviewForm" class="space-y-4">
                <div>
                    <label class="block text-gray-700 mb-2">Select Hotel</label>
                    <select id="hotelSelect" name="hotelId" class="w-full p-2 border rounded text-black">
                        <option value="" class="text-black">Select a hotel...</option>
                        <!-- Dummy data - will be populated from API -->
                        <option value="1" class="text-black">SALT of Palmar, Mauritius</option>
                        <option value="2" class="text-black">Angsana Velavaru, Maldives</option>
                        <option value="3" class="text-black">Four Seasons Kyoto</option>
                    </select>
                </div>

                <div>
                    <label class="block text-gray-700 mb-2">Rating</label>
                    <div class="flex space-x-2" id="ratingStars">
                        <% for(let i = 1; i <= 5; i++) { %>
                            <button type="button" class="star-btn text-2xl" data-rating="<%= i %>">☆</button>
                        <% } %>
                    </div>
                    <input type="hidden" id="ratingInput" name="rating" value="0">
                </div>

                <div>
                    <label class="block text-gray-700 mb-2">Your Review</label>
                    <textarea 
                        name="comment" 
                        rows="4" 
                        class="w-full p-2 border rounded text-black"
                        placeholder="Share your experience..."
                    ></textarea>
                </div>

                <button type="submit" class="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700">
                    Submit Review
                </button>
            </form>
        </div>

        <!-- Reviews List Section -->
        <div class="space-y-6">
            <div class="flex justify-between items-center mb-8">
                <h2 class="text-2xl font-semibold text-white">Recent Reviews</h2>
                <select id="sortReviews" class="p-2 border rounded bg-black/10">
                    <option value="newest">Newest First</option>
                    <option value="highest">Highest Rated</option>
                    <option value="lowest">Lowest Rated</option>
                </select>
            </div>

            <!-- Reviews Container -->
            <div id="reviewsContainer" class="space-y-6">
                <!-- Reviews will be dynamically inserted here -->
            </div>
        </div>
    </section>
</div>

<!-- Review Template -->
<template id="reviewTemplate">
    <article class="review-card p-6 bg-white shadow-md rounded-lg">
        <div class="flex justify-between items-start mb-4">
            <div>
                <h3 class="text-xl font-semibold review-hotel"></h3>
                <div class="flex items-center space-x-2">
                    <div class="review-stars text-yellow-400"></div>
                    <span class="review-date text-gray-500"></span>
                </div>
            </div>
            <div class="flex space-x-2">
                <button class="helpful-btn px-3 py-1 border rounded bg-blue-500 hover:bg-blue-600 text-white" data-helpful="false">
                    <span class="helpful-count">0</span> Helpful
                </button>
                <button class="report-btn text-red-600 hover:text-red-700" data-review-id="">
                    Report
                </button>
            </div>
        </div>
        <p class="review-text text-gray-700 mb-4"></p>
        <div class="flex items-center space-x-4 text-sm text-gray-500">
            <span class="review-author"></span>
            <span>•</span>
            <span class="review-location"></span>
        </div>
    </article>
</template>

<!-- Report Modal -->
<div id="reportModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
        <h3 class="text-xl font-semibold text-black mb-4">Report Review</h3>
        <form id="reportForm" class="space-y-4">
            <input type="hidden" id="reportReviewId" value="">
            <div class="space-y-2">
                <label class="flex items-center text-black">
                    <input type="radio" name="reportReason" value="inappropriate" class="mr-2">
                    Inappropriate Content
                </label>
                <label class="flex items-center text-black">
                    <input type="radio" name="reportReason" value="spam" class="mr-2">
                    Spam or Advertising
                </label>
                <label class="flex items-center text-black">
                    <input type="radio" name="reportReason" value="fake" class="mr-2">
                    Fake Review
                </label>
                <label class="flex items-center text-black">
                    <input type="radio" name="reportReason" value="other" class="mr-2">
                    Other
                </label>
            </div>
            <textarea 
                id="reportDescription" 
                class="w-full p-2 border text-black rounded mt-4" 
                placeholder="Additional details (optional)"
                rows="3"
            ></textarea>
            <div class="flex justify-end space-x-3">
                <button type="button" id="cancelReport" class="px-4 py-2 border text-black rounded hover:bg-gray-100">
                    Cancel
                </button>
                <button type="submit" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">
                    Submit Report
                </button>
            </div>
        </form>
    </div>
</div>

<script>
// Dummy data for testing
const dummyReviews = [
    {
        id: 1,
        hotelId: 1,
        hotelName: "SALT of Palmar, Mauritius",
        rating: 5,
        comment: "Absolutely stunning hotel with incredible service. The private beach access was a highlight of our stay.",
        author: "John D.",
        location: "United Kingdom",
        date: "2024-02-15",
        helpfulCount: 12
    },
    {
        id: 2,
        hotelId: 2,
        hotelName: "Angsana Velavaru, Maldives",
        rating: 4,
        comment: "Beautiful overwater villa with amazing views. Service could be a bit more attentive.",
        author: "Sarah M.",
        location: "Australia",
        date: "2024-02-10",
        helpfulCount: 8
    }
];

// Star rating functionality
document.querySelectorAll('.star-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
        const rating = e.target.dataset.rating;
        document.getElementById('ratingInput').value = rating;
        updateStarDisplay(rating);
    });
});

function updateStarDisplay(rating) {
    document.querySelectorAll('.star-btn').forEach((btn, index) => {
        btn.textContent = index < rating ? '★' : '☆';
    });
}

// Form submission
document.getElementById('reviewForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const review = {
        hotelId: formData.get('hotelId'),
        rating: formData.get('rating'),
        comment: formData.get('comment'),
        date: new Date().toISOString().split('T')[0],
        author: 'Anonymous', // Would come from user session
        location: 'Unknown' // Would come from user profile
    };

    try {
        // This would be an API call in production
        // await submitReview(review);
        alert('Review submitted successfully!');
        e.target.reset();
        updateStarDisplay(0);
        loadReviews(); // Reload reviews
    } catch (error) {
        alert('Error submitting review');
    }
});

// Load and display reviews
function loadReviews() {
    const container = document.getElementById('reviewsContainer');
    const template = document.getElementById('reviewTemplate');
    container.innerHTML = '';

    dummyReviews.forEach(review => {
        const reviewElement = template.content.cloneNode(true);
        
        reviewElement.querySelector('.review-hotel').textContent = review.hotelName;
        reviewElement.querySelector('.review-stars').textContent = '★'.repeat(review.rating) + '☆'.repeat(5 - review.rating);
        reviewElement.querySelector('.review-date').textContent = new Date(review.date).toLocaleDateString();
        reviewElement.querySelector('.review-text').textContent = review.comment;
        reviewElement.querySelector('.review-author').textContent = review.author;
        reviewElement.querySelector('.review-location').textContent = review.location;
        reviewElement.querySelector('.helpful-count').textContent = review.helpfulCount;

        // Add event listeners for helpful and report buttons
        const helpfulBtn = reviewElement.querySelector('.helpful-btn');
        const reportBtn = reviewElement.querySelector('.report-btn');
        
        helpfulBtn.addEventListener('click', () => handleHelpfulClick(helpfulBtn));
        reportBtn.dataset.reviewId = review.id;
        reportBtn.addEventListener('click', () => showReportModal(review.id));

        container.appendChild(reviewElement);
    });
}

// Sort reviews
document.getElementById('sortReviews').addEventListener('change', (e) => {
    const sortType = e.target.value;
    dummyReviews.sort((a, b) => {
        switch(sortType) {
            case 'newest':
                return new Date(b.date) - new Date(a.date);
            case 'highest':
                return b.rating - a.rating;
            case 'lowest':
                return a.rating - b.rating;
        }
    });
    loadReviews();
});

// Initialize reviews on page load
loadReviews();

// Helpful button functionality
function handleHelpfulClick(button) {
    const countElement = button.querySelector('.helpful-count');
    const isHelpful = button.dataset.helpful === 'true';
    
    if (!isHelpful) {
        const currentCount = parseInt(countElement.textContent);
        countElement.textContent = currentCount + 1;
        button.dataset.helpful = 'true';
        button.classList.add('bg-green-500');
        button.classList.remove('bg-blue-500');
    }
}

// Report modal functionality
const reportModal = document.getElementById('reportModal');
const reportForm = document.getElementById('reportForm');
const cancelReport = document.getElementById('cancelReport');

function showReportModal(reviewId) {
    document.getElementById('reportReviewId').value = reviewId;
    reportModal.classList.remove('hidden');
    reportModal.classList.add('flex');
}

function hideReportModal() {
    reportModal.classList.add('hidden');
    reportModal.classList.remove('flex');
    reportForm.reset();
}

// Event listeners for report modal
cancelReport.addEventListener('click', hideReportModal);
reportModal.addEventListener('click', (e) => {
    if (e.target === reportModal) hideReportModal();
});

reportForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const reviewId = document.getElementById('reportReviewId').value;
    const reason = document.querySelector('input[name="reportReason"]:checked')?.value;
    const description = document.getElementById('reportDescription').value;
    
    try {
        // This would be an API call in production
        // await submitReport({ reviewId, reason, description });
        alert('Thank you for your report. We will review it shortly.');
        hideReportModal();
    } catch (error) {
        alert('Error submitting report. Please try again.');
    }
});
</script>

<style>
/* Add mesh gradient animation */
.mesh-gradient {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
        radial-gradient(at 40% 20%, rgba(0,0,255,0.3) 0px, transparent 50%),
        radial-gradient(at 80% 0%, rgba(0,100,255,0.3) 0px, transparent 50%),
        radial-gradient(at 0% 50%, rgba(0,0,255,0.3) 0px, transparent 50%),
        radial-gradient(at 80% 50%, rgba(0,100,255,0.3) 0px, transparent 50%),
        radial-gradient(at 0% 100%, rgba(0,0,255,0.3) 0px, transparent 50%),
        radial-gradient(at 80% 100%, rgba(0,100,255,0.3) 0px, transparent 50%);
    animation: meshGradient 15s linear infinite;
    background-size: 200% 200%;
}

@keyframes meshGradient {
    0% {
        background-position: 0% 0%;
    }
    50% {
        background-position: 100% 100%;
    }
    100% {
        background-position: 0% 0%;
    }
}

.star-btn {
    cursor: pointer;
    color: #fbbf24;
    transition: transform 0.1s;
}

.star-btn:hover {
    transform: scale(1.2);
}

.helpful-btn, .report-btn {
    transition: all 0.2s;
}

.helpful-btn:hover {
    background-color: #f3f4f6;
}

.helpful-btn[data-helpful="true"] {
    cursor: default;
}

#reportModal {
    transition: opacity 0.2s ease-in-out;
}
</style>

